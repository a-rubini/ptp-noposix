
This is a version of wr_ptpd meant to be ported to ZPU or other
embedded processors. Currently it is not ported at all.

I imported in this git tree an unmodified copy of version 916 for the
svn repository (white-rabbit/trunl/software/), and started working on
that.  

I planned to change the Makefiles to have no external dependencies (like
../../Makedefs), but I finally chose to write a new top-level Makefile
and use that instead. Other Makefiles have been removed, so you don't
get strange errors if issuing "make" inside (you'll get "no Makefile"
which I see as a better error).

WARNING: The is no dependencies support, so if you touch headers you should
"make clean" and again "make".

Configuration of the package, for use witht he top-level Makefile, is
with environment variables. You should set the following two at this
point:

    CROSS_COMPILE   (the compilation prefix, may be a full path)
    LINUX           (the main directory of the kernel sources)

For example, I do like this in my own systems:

    export CROSS_COMPILE=/opt/eldk-4.2-arm/usr/bin/arm-linux-
    export LINUX=/usr/src/wrs-kernel
or
    export CROSS_COMPILE=$HOME/zpugcc-install/bin/zpu-elf-

(the latter is not working, as the package has not been ported yet).

The current situation is working. It means that this new ptpd 
can work on a White Rabbit Switch like the original one, when compiled
for ARM.

The freestanding one is not working, yet.

     The compilation steps
     ---------------------

The package (which only exists to make ptpd a freestanding thing
with a goal of short-term maintainability) is designed as follows:

* all objects from ptpd are linked into ptpd.o . This is where
I look for undefined symbols that must be dealt with.

* wr-specific libraries and special "late objects" are linked
later, to make the normal linux-hosted ptpd that runs on the switch.
Late objects are ptpd-internal files that need to be rewritten
for the freestanding version (e.g.: startup.c) and wrap-management
files (like implementing internal function names by calling system ones).

* the same ptpd.o is linked with other objects (from libposix, which
is probably misnamed) to make the freestanding object file.  Such
objects include rewriting of posix-heavy thing (e.g., startup.c),
no-op IPC library files and wrap-management files.

* this "ptpd-freestanding.o" may be linked in a full-fledged
executable, but this is not the default when running "make", so I don't
have a zillion errors during development (e.g., libposix files are
not ready yet).  You can "make ptpd-freestanding" if you want.


     How portability is accomplished
     -------------------------------

The command-line of $(CROSS_COMPILE)gcc has the option

    -include libposix/ptpd-wrappers.h

The header does all the magic by selecting whether the compilation
is freestanding or not.

If the compilation is not freestanding, the header includes headers that
can't be included otherwise (because they are missing in the zpu
installation, and probably in other freestanding implementation).

If the compilation is freestanding, what is missing is defined or
declared.


In this way, the original sources are minimally affected and I hope to
fill the missing bits easily. In any case, I removed the inclusion of
system headers where they were not needed, and sometimes I added
"#ifdeffed" inclusions when headers were only needed in one place
(to avoid including it in ptpd-wrappers if it's too specific).

Sometimes, inclusion of system headers is removed when it was not needed.

     List of issues I am facing
     --------------------------

* This binary is horribly big.

I changed the Makefile to create a ptpd.o with all the objects,
before linking to the full-fledged executable ptpd.  This shows
that some of the size comes from the libraries, but it's still big:

   tornado$ size ptpd.o ptpd
      text    data     bss     dec     hex filename
     52272      32     140   52444    ccdc ptpd.o
     88896     564    1216   90676   16234 ptpd

The biggest files are the following 4:

       text    data     bss     dec     hex filename
       7628       0       0    7628    1dcc ./PTPWRd/dep/msg.o
       8780       0       0    8780    224c ./PTPWRd/display.o
      11704       4     256   11964    2ebc ./libwripc/wr_ipc.o
      13700       0       0   13700    3584 ./PTPWRd/protocol.o


* The program is built over floating point. Float stuff is being
removed as it would be a problem with zpu

* Other issues are being worked on, I don't have documentation at
this point, though
